//////////////////////////////////////////////////////////////////////////
//用于表示一个扇区号序列，这个序列可能不是连续的
#ifndef _SECTOR_LIST_H_
#define _SECTOR_LIST_H_


class SectorList
{
public:
	/************************************************************************/
	/* 一个连续的扇区序列                                                   */
	/************************************************************************/
	typedef struct _tagSECTOR_LIST_NODE{
		LONG_INT	mStartSector;	//当前扇区的起始扇区号
		LONG_INT	mSectorCnt;		//当前节点的扇区的总数
	}SECTOR_LIST_NODE ,*PSECTOR_LIST_NODE;

	//扇区序列数组
	PSECTOR_LIST_NODE m_pSecList;
	//上去序列的扇区总数
	int				  m_nListNodeCnt;
	CString			  m_strName;//当前扇区列表的名字


	SectorList(void);
	~SectorList(void);

public:  
	//////////////////////////////////////////////////////////////////////////
	//在序列中添加一个扇区号
	//param
	//		sector	需要添加的扇区号
	//		nSecCount 要添加的扇区总数 
	//return 添加是否成功
	//		添加失败原因有 扇区号有无(负数),或者nSecCount=0
	//////////////////////////////////////////////////////////////////////////
	BOOL AddSector(LONG_INT sector ,DWORD nSecCount = 1);
	BOOL AddSector(LONG_INT sector ,LONG_INT nSecCount);
	BOOL AddSector(DWORD sector ,DWORD nSecCount = 1);
	BOOL AddSector(DWORD sector ,LONG_INT nSecCount);


	//////////////////////////////////////////////////////////////////////////
	//判断指定的扇区是否存在
	//param
	//		sector	需要判断的扇区号
	//////////////////////////////////////////////////////////////////////////
	BOOL IsSectorExist(LONG_INT sector);

	//////////////////////////////////////////////////////////////////////////
	//如果不存在则修复扇区号（如有序列  1，2，3  7，8，9  13,14,15  如果输入的
	//是6则返回7，如果输入的是12则返回13，如果输入4则返回3，如果输入10则返回9）
	//param
	//		sector	待修复的扇区号
	//return 需要修复的扇区号  -1修复失败
	//////////////////////////////////////////////////////////////////////////
/*	LONG_INT FixSector(LONG_INT sector);*/

	//////////////////////////////////////////////////////////////////////////
	//如果不存在则修复到下一个有效扇区号（如有序列  1，2，3  7，8，9  13,14,15
	//如果输入的是6则返回7，如果输入的是12则返回13）
	//param
	//		sector	待修复的扇区号
	//return 需要修复的扇区号 -1修复失败
	//////////////////////////////////////////////////////////////////////////
	LONG_INT FixToNextSector(LONG_INT sector);

	//////////////////////////////////////////////////////////////////////////
	//如果不存在则修复前一个有效扇区号（如有序列  1，2，3  7，8，9  13,14,15  
	//如果输入的是如果输入4则返回3，如果输入10则返回9）
	//param
	//		sector	待修复的扇区号
	//return 需要修复的扇区号 -1修复失败
	//////////////////////////////////////////////////////////////////////////
	LONG_INT FixToPreSector(LONG_INT sector);

	//////////////////////////////////////////////////////////////////////////
	//获得自己的一个备份
	SectorList* Clone();

	//////////////////////////////////////////////////////////////////////////
	//获得当前显示的扇区序列的名字
	CString GetName();
	//////////////////////////////////////////////////////////////////////////
	//设置当前扇区序列的名字
	void  SetName(CString strName);

	//////////////////////////////////////////////////////////////////////////
	//获得扇区序列中的起始扇区号 
	//return 起始扇区号 如果不存在的话返回-1
	LONG_INT GetStartSector();

};

#endif
